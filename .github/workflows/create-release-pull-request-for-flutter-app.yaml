name: Create release pull request for Flutter app

on:
  workflow_call:
    inputs:
      version:
        description: "リリースバージョン（例: 1.0.0）\n未指定の場合はビルド番号のみインクリメント。"
        required: false
        type: string
      working-directory:
        description: "モノレポの場合はをディレクトリを指定する"
        default: "./"
        type: string
    secrets:
      app-id:
        description: "GitHub App ID"
        required: true
      private-key:
        description: "GitHub App private key"
        required: true
      app-token:
        description: "GitHub App token"
        required: false

jobs:
  # リリースバージョンとブランチ名を設定する。
  set-version-and-branch-name:
    name: Set version and branch name
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.set-output.outputs.version }}
      build-number: ${{ steps.set-output.outputs.build-number }}
      branch_name: ${{ steps.set-output.outputs.branch_name }}
    steps:
      - uses: actions/checkout@v3

      # 現在のバージョンとビルド番号を取得する。
      - name: Retrieve pubspec metadata
        id: pubspec
        uses: altive/pubspec-metadata@v1
        with:
          pubspec-file: "${{ inputs.working-directory }}/pubspec.yaml"

      # リリースバージョンが入力されている場合は入力されたバージョンを環境変数に設定する。
      - name: Set input version to GITHUB_ENV
        if: ${{ inputs.version }}
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV

      # リリースバージョンが入力されていない場合は現在のバージョンを環境変数に設定する。
      - name: Set current version to GITHUB_ENV
        if: ${{ !inputs.version }}
        run: |
          echo "VERSION=${{ steps.pubspec.outputs.version-number }}" >> $GITHUB_ENV

      # リリースブランチ名を環境変数に設定する。
      - name: Set branch name to GITHUB_OUTPUT
        run: |
          branch_name="release/${{ env.VERSION }}"
          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV

      # リリースバージョン・インクリメントしたビルド番号・リリースブランチ名を出力変数に設定する。
      - name: Set version and branch name to GITHUB_OUTPUT
        id: set-output
        run: |
          echo "version=${{ env.VERSION }}" >> "$GITHUB_OUTPUT"
          echo "build-number=$((${{ steps.pubspec.outputs.build-number }} + 1))" >> "$GITHUB_OUTPUT"
          echo "branch_name=${{ env.BRANCH_NAME }}" >> "$GITHUB_OUTPUT"

  # リリースブランチを作成する。
  create-branch:
    name: Create release branch
    runs-on: ubuntu-latest
    needs: [set-version-and-branch-name]
    steps:
      - uses: actions/checkout@v3

      # ブランチ名を環境変数に設定する。
      - name: Set branch name to GITHUB_ENV
        run: |
          echo "BRANCH_NAME=${{ needs.set-version-and-branch-name.outputs.branch_name }}" >> $GITHUB_ENV

      # リリースブランチがすでに存在するかどうかを判定し、結果を環境変数に設定する。
      - name: Set whether the branch is already existing to GITHUB_ENV
        run: |
          branch_is_existing=$(
            git fetch origin ${{ env.BRANCH_NAME }} &&
            echo true ||
            echo false
          )
          echo "BRANCH_IS_EXISTING=${branch_is_existing}" >> $GITHUB_ENV

      # リリースブランチが存在しない場合は作成する。
      - name: Create release branch
        if: env.BRANCH_IS_EXISTING == 'false'
        run: |
          git switch -c ${{ env.BRANCH_NAME }}
          git push origin ${{ env.BRANCH_NAME }}

  # バージョン番号とビルド番号を上げる。
  bump-version:
    name: Bump version and build number
    runs-on: ubuntu-latest
    needs: [set-version-and-branch-name, create-branch]
    steps:
      - uses: actions/checkout@v3

      # バージョンとブランチ名を環境変数に設定する。
      - name: Set version and branch name to GITHUB_ENV
        run: |
          echo "VERSION=${{ needs.set-version-and-branch-name.outputs.version }}" >> $GITHUB_ENV
          echo "BUILD=${{ needs.set-version-and-branch-name.outputs.build-number }}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${{ needs.set-version-and-branch-name.outputs.branch_name }}" >> $GITHUB_ENV

      # 作成したリリースブランチに切り替える。
      - name: Switch branch
        run: |
          git fetch origin ${{ env.BRANCH_NAME }}
          git switch ${{ env.BRANCH_NAME }}

      # バージョン番号とビルド番号を上げる。
      - name: Bump version and build number
        run: |
          VERSION=${{ env.VERSION }}
          BUILD=${{ env.BUILD }}
          sed -i "s/^version:.*$/version:\ $VERSION\+$BUILD/" ./pubspec.yaml
        working-directory: ${{ inputs.working-directory }}

      # 変更差分があるかどうかを判定し、結果を環境変数に設定する。
      - name: Check diff
        run: |
          diff_count=$(git diff | wc -l)
          echo "DIFF_COUNT=${diff_count}" >> $GITHUB_ENV

      # 変更差分がある場合はコミットするためのGitの設定を行う。
      - name: Git config
        if: env.DIFF_COUNT != '0'
        run: |
          git remote set-url origin https://github-actions:${GH_TOKEN}@github.com/${GITHUB_REPOSITORY}
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"

      # 変更差分がある場合はコミットする。
      - name: Commit & Push
        if: env.DIFF_COUNT != '0'
        run: |
          git add .
          git commit -m "build: bump app to ${{ env.VERSION }}+${{ env.BUILD }}"
          git push origin ${{ env.BRANCH_NAME }}

  # Pull-Requestを作成する。
  create-pr:
    name: Create Pull-Request for release
    runs-on: ubuntu-latest
    needs: [set-version-and-branch-name, bump-version]
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v3

      # ブランチ名を環境変数に設定する。
      - name: Set branch name to GITHUB_ENV
        run: |
          echo "BRANCH_NAME=${{ needs.set-version-and-branch-name.outputs.branch_name }}" >> $GITHUB_ENV

      # secrets: app-tokenの存在確認
      - name: Check for Secret availability
        id: secret-check
        # perform secret check & put boolean result as an output
        shell: bash
        run: |
          if [ "${{ secrets.app-token }}" == "" ]; then
            echo "has-token=false" >> $GITHUB_OUTPUT;
          else
            echo "has-token=true" >> $GITHUB_OUTPUT;
          fi

      # app-tokenの提供がなければ、GitHub Appのトークンを生成する。
      - name: Generate GiHub App token
        if: ${{ !steps.secret-check.outputs.has-token }}
        id: generate_token
        uses: tibdex/github-app-token@v1
        with:
          app_id: ${{ secrets.app-id }}
          private_key: ${{ secrets.private-key }}

      # mainブランチ向けにPull-Requestを作成する。
      - name: Create release PR
        env:
          GITHUB_TOKEN: |-
            ${{ steps.secret-check.outputs.has-token && secrets.app-token || steps.generate_token.outputs.token }}
        run: gh pr create -B $GITHUB_REF -t ${{ env.BRANCH_NAME }} -b "" -a $GITHUB_ACTOR -H ${{ env.BRANCH_NAME }}

      # GitHub Appのトークンを失効させる。
      - name: Revoke GitHub Apps token
        if: ${{ !steps.secret-check.outputs.has-token }}
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          curl --location --silent --request DELETE \
            --url "${GITHUB_API_URL}/installation/token" \
            --header "Accept: application/vnd.github+json" \
            --header "X-GitHub-Api-Version: 2022-11-28" \
            --header "Authorization: Bearer ${GITHUB_TOKEN}"
